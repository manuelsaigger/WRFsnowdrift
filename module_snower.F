MODULE SNOWERO

!-----------------------------------------------------------
! Module to calculate snowdrift erosion
!-----------------------------------------------------------

CONTAINS
SUBROUTINE snowerosion(dt, config_flags, g, dz8w, rho_phy, u, v, CDA,            &
            uth, ustar, ustarcor, phis, phis_end, phim, tracer, hsalt, rhodrift, &
            snow, snowh, snoweracc, snoweracckg, fsalt, fero,                    & ! snicexy, & 
            fdep, snowdepacc, snowdepacckg,                                      &
            ids,ide, jds,jde, kds,kde,                                           &
            ims,ime, jms,jme, kms,kme,                                           &
            its,ite, jts,jte, kts,kte) 
USE module_configure             !frame/
USE module_state_description     !frame/ --> generated by registry

IMPLICIT NONE
TYPE(grid_config_rec_type),  INTENT(IN   ) :: config_flags
INTEGER,INTENT(IN) :: ids,ide, jds,jde, kds,kde,                                         &
                       ims,ime, jms,jme, kms,kme,                                        &
                       its,ite, jts,jte, kts,kte   
REAL,INTENT(IN) :: dt, g
REAL,DIMENSION(ims:ime,jms:jme),INTENT(IN) :: CDA, ustar
REAL,DIMENSION(ims:ime,jms:jme),INTENT(INOUT) :: snow, snowh, phis, phis_end, phim, snoweracc,     &
                                                snoweracckg, hsalt, fdep, snowdepacc, snowdepacckg
REAL,DIMENSION(ims:ime,jms:jme), INTENT(OUT) :: rhodrift, uth, fero, fsalt, ustarcor
REAL,DIMENSION(ims:ime,kms:kme,jms:jme),INTENT(IN) :: rho_phy, dz8w, u, v
! REAL,DIMENSION(ims:ime ,-2:0,jms:jme), INTENT(INOUT) :: snicexy ! uncomment this line for real 
REAL,DIMENSION(ims:ime,kms:kme,jms:jme,num_tracer),INTENT(INOUT) :: tracer 

!Local variables
INTEGER      :: i, j
REAL         :: fero_max, hsalt_old, phis_old, ferotemp, ferotempmax_phim, fsalt_tmp




DO j=jts,jte 
  DO i=its,ite
    
    !---------------------------------------
    ! SNOW SURFACE
    !---------------------------------------
    ! only go into erosion if snow is available (keep 1cm of unerodible snowheight for stability)
    IF (snow(i,j) .gt. 0.0 .and. snowh(i,j) .gt. 0.01) THEN
  
      ! calculate bulk snow density
      rhodrift(i,j) = snow(i,j) / snowh(i,j)
      
      !uth is the friction threshold velocity calculated from snow density
      uth(i,j) = 0.0195 + 0.021 * (sqrt(rhodrift(i,j))) !Schmid 2021, equation (16)
    
      fero_max = MAX(0.0, snow(i,j)/dt) ! maximum available snow for erosion -> snow mass in grid cell
      
      !-------------------------------------
      ! SALTATION LAYER
      !-------------------------------------
      !phim is the maximum saltation concentration, it should not be 0 because its has been divided through 
      phim(i,j) = MAX(1E-16, phim(i,j))     
      !the friction velocity must exceed the threshold value so that snowdrift can take place
      IF (ustar(i,j) .gt. uth(i,j)) THEN
         !correction of friction velocity, Schmid 2021, equation (18)
         ustarcor(i,j) = MIN(ustar(i,j), (uth(i,j)-ustar(i,j)) * MIN(1.,(phis(i,j)/phim(i,j))**2) + ustar(i,j))   
      ELSE
         ustarcor(i,j) = ustar(i,j) 
      ENDIF     
      !ustarlim as a maximum of the friction velocity, 
      ustarcor(i,j) = MIN(config_flags%ustlim, ustarcor(i,j)) 
               
      hsalt_old = hsalt(i,j)  ! saltation layer height from previous time step, msaigger
      IF (ustarcor(i,j) .le. uth(i,j)) THEN
         ! ustarcor < uth: empty saltation layer to ground, set hsalt, phis, phim, fero, fsalt to zero
         fdep(i,j) = MAX(0.0, (phis_end(i,j)*hsalt_old)/dt)
         phis(i,j) = 0.0
         phis_end(i,j) = 0.0
         phim(i,j) = 0.0
         hsalt(i,j) = 0.0
         fero(i,j) = 0.0
         fsalt(i,j) = 0.0

      ELSE      
         ! ustarcor > uth: erosion takes place         

         !height of saltation layer, Schmid 2021, equation (14)
         hsalt(i,j) = 1.6 * ustarcor(i,j)**2/(2*g)

         !phis_old: saltation layer concentration from previous time step, updated to new saltation layer height (msaigger)
         phis_old = phis_end(i,j)*hsalt_old/hsalt(i,j)    
    
         !maximum of saltation concentration, Schmid 2021, equation (19)
         phim(i,j) = MAX(1E-16,(rho_phy(i,kts,j)/(3.29*ustarcor(i,j)))*(1-(uth(i,j)**2/ustarcor(i,j)**2)) )
    
         !preliminary erosion flux and saltation concentration, Schmid 2021, equation (20)
         ferotemp = MAX(0.0, config_flags%esalt * rho_phy(i,kts,j)* (ustarcor(i,j)**2 - uth(i,j)**2))
         
         !maximum erosion flux to not reach phim
         ferotempmax_phim = MAX(0.0, phim(i,j) - phis_old)
    
         ! limit erosion flux to max available snow, msaigger
         ferotemp = MIN(ferotemp, fero_max)
         
         ! limit erosion flux to not reach phim
         fero(i,j) = MIN(ferotemp, ferotempmax_phim)

         phis(i,j) = phis_old + (fero(i,j)*dt)/hsalt(i,j) ! updated, msaigger
      
         !-------------------------------------
         ! FLUX TO SUSPENSION LAYER
         !-------------------------------------
         ! calculate flux from saltation into suspension layer, restrict to positive values (Schmid 2021, eq. 21)
         fsalt_tmp = MAX(0.0, SQRT(u(i,kts,j)**2 + v(i,kts,j)**2) * CDA(i,j) * (phis(i,j) - tracer(i,kts,j,P_snowconc)))
        
         !limit fsalt to snow mass in saltation layer
         fsalt(i,j) = MIN(phis(i,j)*hsalt(i,j), fsalt_tmp) 
         
         ! update phis after saltation flux
         phis_end(i,j) = phis(i,j) - (fsalt(i,j)*dt)/hsalt(i,j)
         
         
         ! no depositional mass flux here
         fdep(i,j) = 0.0
       
      ENDIF ! ustarcor
      
    ELSE ! if no snow at ground 
      !empty saltation layer to ground, set hsalt, phis, phim, fero, fsalt to zero
      fdep(i,j) = MAX(0.0, -(phis_end(i,j)*hsalt(i,j)/dt))
      phis(i,j) = 0.0
      phis_end(i,j) = 0.0
      phim(i,j) = 0.0
      hsalt(i,j) = 0.0
      fero(i,j) = 0.0
      fsalt(i,j) = 0.0
      
      rhodrift(i,j) = 100.0 ! set snow density artificially to 100 kg m-3 -> for deposition 
    ENDIF
    
    ! update suspension in lowest layer
    tracer(i,kts,j,P_snowconc) = tracer(i,kts,j,P_snowconc) + ((fsalt(i,j) / dz8w(i,kts,j)) * dt)
    
    
    
    !---------------------------------------
    ! SNOW SURFACE
    !---------------------------------------
    ! update snow mass, snow height
    snow(i,j) = snow(i,j) - (fero(i,j) - fdep(i,j))*dt
    snowh(i,j) = snowh(i,j) - ((fero(i,j) - fdep(i,j))*dt)/rhodrift(i,j) ! update snowheight as well (only in ideal case)
    !snicexy(i,0,j) = snicexy(i,0,j) - (fero(i,j) - fdep(i,j))*dt  ! uncomment this line for real 
    
    ! write out accumulated snow erosion/deposition (only use positve/negative saltation mass change
    snoweracckg(i,j) = snoweracckg(i,j) + (fero(i,j)*dt) ! accumulated eroded snow mass (kg m-2)
    snoweracc(i,j) = snoweracc(i,j) + (fero(i,j)*dt)/rhodrift(i,j) ! accumulated eroded snow height (m)
    
    snowdepacckg(i,j) = snowdepacckg(i,j) + fdep(i,j)*dt ! accumulated deposited snow mass (kg m-2)
    snowdepacc(i,j) = snowdepacckg(i,j) + ((fdep(i,j)*dt)/rhodrift(i,j)) ! accumulated deposited snow height (m)
    
   enddo
  enddo

END SUBROUTINE snowerosion
END MODULE SNOWERO
        
    
    
    
    
      
    
      
      
      
      
      
      
      
      
    

MODULE SNOWERO

!-----------------------------------------------------------
! Module to calculate snowdrift erosion
!-----------------------------------------------------------

CONTAINS
SUBROUTINE snowerosion(dt, config_flags, g, tracer, dz8w, zmid, zlow, rho_phy,   &
           uth, ustar, ustarcor, phis, phim, u10, v10, CDA, setvel,          &
           snow, snowh, fero, snoweracc, fsalt, hsalt, rhodrift,   &
           snoweracckg, &
           ids,ide, jds,jde, kds,kde,            &
           ims,ime, jms,jme, kms,kme,      &
           its,ite, jts,jte, kts,kte) 
 USE module_configure             !frame/
 USE module_state_description     !frame/ --> generated by registry

 IMPLICIT NONE
 TYPE(grid_config_rec_type),  INTENT(IN   ) :: config_flags
 INTEGER,INTENT(IN) :: ids,ide, jds,jde, kds,kde,    &
                       ims,ime, jms,jme, kms,kme,            &
                       its,ite, jts,jte, kts,kte   
 REAL,INTENT(IN) :: dt, g
 REAL,DIMENSION(ims:ime,jms:jme),INTENT(IN) :: CDA, u10, v10, ustar, setvel
 REAL,DIMENSION(ims:ime,jms:jme),INTENT(INOUT) :: snow, snowh, phis, phim, snoweracc, ustarcor, &
                                                snoweracckg, hsalt
 REAL,DIMENSION(ims:ime,jms:jme), INTENT(OUT) :: rhodrift, uth, fero, fsalt
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme),INTENT(IN) :: rho_phy, zmid, zlow, dz8w
! REAL,DIMENSION(ims:ime ,-2:0,jms:jme), INTENT(INOUT) :: snicexy
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme,num_tracer),INTENT(INOUT) :: tracer 

!Local variables
 INTEGER      :: i, j, k
 REAL           :: ferotemp, ph, ka, snow_old, hsalt_old, phis_old, fero_max

!---------------CONSTANTS------------------------------------------------
 ka = 0.4   !von karman constant 
!-----------------------------------------------------------------------

!loop in the bottom layer 
  k=kts    !k=kts means the lowest layer

 DO j=jts,jte 
  DO i=its,ite

!calculate the snow density if snow height and snow water equivalent are not 0
    IF(snow(i,j).gt.0.0 .and. snowh(i,j).gt.0.0) THEN
     rhodrift(i,j) = snow(i,j)/snowh(i,j)
    ELSE
     rhodrift(i,j) = 100.  !needed for deposition even if snow height is 0
    ENDIF

!phim is the maximum saltation concentration, it should not be 0 because its has been divided through 
  phim(i,j) = MAX(1E-16, phim(i,j))     
!uth is the friction threshold velocity calculated from snow density
  uth(i,j) = 0.0195 + 0.021 * (sqrt(rhodrift(i,j))) !Schmid 2021, equation (16)

!the friction velocity must exceed the threshold value so that snowdrift can take place
   IF (ustar(i,j) .gt. uth(i,j)) THEN
    !correction of friction velocity, Schmid 2021, equation (18)
     ustarcor(i,j) = MIN(ustar(i,j), (uth(i,j)-ustar(i,j)) * MIN(1.,(phis(i,j)/phim(i,j))**2) + ustar(i,j))
     !ustarlim as a maximum of the friction velocity, 
    !ustarlim is defined in the namelist (default is very high: 10 m/s)
     ustarcor(i,j) = MIN(config_flags%ustlim, ustarcor(i,j)) 
    ELSE
     ustarcor(i,j) = ustar(i,j)
     ustarcor(i,j) = MIN(config_flags%ustlim, ustarcor(i,j))  
   ENDIF

!uth, ustarcor, rhodrift are needed for the deposition module, so they are calculated at the beginning
!snow erosion only if snow height is not 0
   IF (snowh(i,j) .le. 0.0) THEN
     GO TO 104 !if snow height = 0 go to 104
   ENDIF

! bugfix erosion flux limiter:
! calculate fero_max from as snow(i,j)/dt, limit ferotemp to fero_max (not more is eroded than available)
   fero_max = snow(i,j)/dt ! maximum possible erosion flux (empty available snow), msaigger  

   hsalt_old = hsalt(i,j)  ! saltation layer height from previous time step, msaigger

!corrected friction velocity must be greater than threshold velocity for snowdrift erosion
   IF (ustarcor(i,j) .le. uth(i,j)) THEN
     !correction of the saltation peak!! careful, not fully tested!
     !negative mass flux down to earth, available particle in saltation layer fall down to the ground
     fero(i,j) = -(phis(i,j)*hsalt_old)/dt
     phis(i,j) = 0.0
     GO TO 103
   ELSE
    !height of saltation layer, Schmid 2021, equation (14)
     hsalt(i,j) = 1.6 * ustarcor(i,j)**2/(2*g)

    !phis_old: saltation layer concentration from previous time step, updated to new saltation layer height (msaigger)
     phis_old = phis(i,j)*hsalt_old/hsalt(i,j)    
    !maximum of saltation concentration, Schmid 2021, equation (19)
     phim(i,j) = MAX(1E-16,(rho_phy(i,kts,j)/(3.29*ustarcor(i,j)))*(1-(uth(i,j)**2/ustarcor(i,j)**2)) )
    !preliminary erosion flux and saltation concentration, Schmid 2021, equation (20)
    ferotemp = MAX(0.0, config_flags%esalt * rho_phy(i,kts,j)* (ustarcor(i,j)**2 - uth(i,j)**2))
    
    ! limit erosion flux to max available snow, msaigger
    ferotemp = MIN(ferotemp, fero_max)

    ph = phis_old + (ferotemp*dt)/hsalt(i,j) ! updated, msaigger
   ENDIF !ustar

!will this preliminary calculated concentration exceed the maximum concentration?
!if so, termination of the erosion process and go to 104
   IF (phim(i,j) .le. ph) THEN
      GO TO 104
     ELSE
    !if not, preliminary calculations are used for erosion flux and saltation concentration 
      fero(i,j) = ferotemp 
      phis(i,j) = ph       
   ENDIF  

!update of the noah-mp snow water equivalent, snicexy must also be updated because it overwrites 
!the snow water equivalent in module_sf_noahmplsm.F
 103 continue 
   snow_old = snow(i,j)
   snow(i,j) = MAX(0.0, snow(i,j) - fero(i,j) * dt)  !snow water equivalent [mm]
 !accumulated snowdrift erosion, delete /rhodrift to get it in mm snow water equivalent
  ! snoweracc(i,j) = snoweracc(i,j) + (snow_old â€“ snow(i,j))/rhodrift(i,j)   ![m]
   snoweracc(i,j) = snoweracc(i,j)+(snow_old-snow(i,j))/rhodrift(i,j)  !ms
   snoweracckg(i,j) = snoweracckg(i,j)+(snow_old-snow(i,j))
   ! snicexy(i,0,j) = MAX(0.0, snicexy(i,0,j) - fero(i,j) * dt)   !snow layer ice [mm]

 104 continue 

!the following lines describe the flux of particles into the suspension layer
!possible in a grid cell even though no erosion took place at same time step
!but only possible if there is saltation concentration in the saltation layer
 IF (phis(i,j) .ne. 0.0) THEN
!bulk parameterisation, flux in the suspension layer
!saltation concentration must be greater than suspension concentration (tracer(..snowconc))
  fsalt(i,j) = SQRT(u10(i,j)**2+v10(i,j)**2) * CDA(i,j) * dt * MAX(0.0, (phis(i,j)-tracer(i,kts,j,P_snowconc))) 
!flux is limited
  fsalt(i,j) = MIN(phis(i,j)*hsalt(i,j), fsalt(i,j)) 
!update of saltation and suspension concentration
  tracer(i,kts,j,P_snowconc) = MAX(0.0,tracer(i,kts,j,P_snowconc) + fsalt(i,j)/dz8w(i,kts,j))
  phis(i,j) = MAX(0.0,phis(i,j) - fsalt(i,j)/hsalt(i,j)) !no negative concentration

 ENDIF !phis .ne. 0

  ENDDO !end i 
 ENDDO !end j

END SUBROUTINE snowerosion
END MODULE SNOWERO
